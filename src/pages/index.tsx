// import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
// import Link from "next/link";
import CountUp from "react-countup";
import Box from "@mui/material/Box";
import Paper from "@mui/material/Paper";
import { api } from "@/utils/api";
import type { MyPage } from "@/components/layouts/layoutTypes";
import type { IJwtDecode } from "@/types/session";
import type { GetServerSideProps } from "next";
import { getServerAuthSession } from "@/server/auth";
import jwtDecode from "jwt-decode";
import { startOfMonth, endOfMonth } from "date-fns";
import type { FilterReportType } from "@/types/global";
import { FormContainer, useForm, useWatch } from "react-hook-form-mui";
import DatePicker from "@/components/controls/DatePicker";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Typography from "@mui/material/Typography";
import {
  // Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  // Legend,
  ResponsiveContainer,
  type TooltipProps,
  Bar,
  ComposedChart,
  // PieChart,
  // Pie,
  // Cell,
} from "recharts";
import type {
  NameType,
  ValueType,
} from "recharts/types/component/DefaultTooltipContent";
import TrendingUp from "@mui/icons-material/TrendingUp";
import TrendingDown from "@mui/icons-material/TrendingDown";
import ArrowDownward from "@mui/icons-material/ArrowDownward";
import ArrowUpward from "@mui/icons-material/ArrowUpward";
import Payments from "@mui/icons-material/Payments";
import AccountBalanceWallet from "@mui/icons-material/AccountBalanceWallet";
import {
  checkNumber,
  formatNumber,
  dateConvertID,
  abbreviateNumberLib,
} from "@/utils/helpers";
import { format } from "date-fns";
import { Role } from "@/types/prisma-api/role.d";

const title = "Halaman Utama";

const DashboardPage: MyPage = () => {
  const date = new Date(); // Misalnya, gunakan tanggal saat ini
  const firstDayOfMonth = startOfMonth(date);
  const lastDayOfMonth = endOfMonth(date);
  const defaultValues: FilterReportType = {
    startDate: firstDayOfMonth,
    endDate: lastDayOfMonth,
  };
  const formContext = useForm<FilterReportType>({ defaultValues });

  const { control } = formContext;

  const startDate = useWatch({ control, name: "startDate" });
  const endDate = useWatch({ control, name: "endDate" });

  const income = api.dashboard.income.useQuery({ startDate, endDate });
  const expense = api.dashboard.expense.useQuery({ startDate, endDate });
  const profitLoss = api.dashboard.profitLoss.useQuery({ startDate, endDate });
  const debtTotal = api.dashboard.debtReceivableTotal.useQuery({
    type: "debt",
    startDate,
    endDate,
  });
  const receivableTotal = api.dashboard.debtReceivableTotal.useQuery({
    type: "receivable",
    startDate,
    endDate,
  });
  const salesDaily = api.dashboard.transactionDaily.useQuery({
    type: "sales",
    startDate,
    endDate,
  });
  const purchaseDaily = api.dashboard.transactionDaily.useQuery({
    type: "purchase",
    startDate,
    endDate,
  });
  const salesMonthly = api.dashboard.transactionMonthly.useQuery({
    type: "sales",
    startDate,
    endDate,
  });
  const purchaseMonthly = api.dashboard.transactionMonthly.useQuery({
    type: "purchase",
    startDate,
    endDate,
  });

  const DateTooltip = ({
    active,
    payload,
    label,
  }: TooltipProps<ValueType, NameType>) => {
    if (active && payload?.length) {
      return (
        <Box className="custom-tooltip px-4 py-1" component={Paper}>
          <p className="label">{`${dateConvertID(new Date(label as Date), {
            dateStyle: "short",
          })}`}</p>
          {payload.map((obj, index) => (
            <p key={index} className={`intro text-[${obj.color!}]`}>
              {`${obj.dataKey as string}: ${formatNumber(obj.value as number)}`}
            </p>
          ))}
        </Box>
      );
    }

    return null;
  };

  const GeneralTooltip = ({
    active,
    payload,
    label,
  }: TooltipProps<ValueType, NameType>) => {
    if (active && payload?.length) {
      return (
        <Box className="custom-tooltip px-4 py-1" component={Paper}>
          <p className="label">{label as string}</p>
          {payload.map((obj, index) => (
            <p key={index} className={`intro text-[${obj.color!}]`}>
              {`${obj.dataKey as string}: ${formatNumber(obj.value as number)}`}
            </p>
          ))}
        </Box>
      );
    }

    return null;
  };

  return (
    <>
      <Head>
        <title>{`Bidang Usaha | ${title}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="grid w-full gap-4">
        <FormContainer formContext={formContext}>
          <Box
            component={Paper}
            className="grid grid-cols-1 items-center justify-center gap-4 p-4 md:grid-cols-3"
          >
            <Typography variant="h5">{title}</Typography>
            <DatePicker
              label="Mulai"
              name="startDate"
              maxDate={endDate}
              required
            />
            <DatePicker
              label="Hingga"
              name="endDate"
              minDate={startDate}
              required
            />
          </Box>
        </FormContainer>
        <Box className="grid grid-cols-1 gap-4 md:grid-cols-3">
          <Card>
            <CardContent>
              <div className="flex w-full flex-col items-start gap-2 md:flex-row">
                <div className="flex-grow">
                  <Typography
                    sx={{ fontSize: 14 }}
                    color="text.secondary"
                    gutterBottom
                  >
                    {`${
                      profitLoss
                        ? checkNumber(profitLoss.data) > 0
                          ? "Laba"
                          : "Rugi"
                        : "-"
                    }`}
                  </Typography>
                  <Typography variant="h5" component="div">
                    <CountUp
                      separator="."
                      decimal=","
                      decimals={2}
                      prefix="Rp. "
                      end={profitLoss?.data ?? 0}
                    />
                  </Typography>
                </div>
                <div>
                  {profitLoss && checkNumber(profitLoss.data) > 0 ? (
                    <TrendingUp className="text-6xl" color="success" />
                  ) : (
                    <TrendingDown className="text-6xl" color="error" />
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent>
              <div className="flex w-full flex-col items-start gap-2 md:flex-row">
                <div className="flex-grow">
                  <Typography
                    sx={{ fontSize: 14 }}
                    color="text.secondary"
                    gutterBottom
                  >
                    Pendapatan
                  </Typography>
                  <Typography variant="h5" component="div">
                    <CountUp
                      separator="."
                      decimal=","
                      decimals={2}
                      prefix="Rp. "
                      end={income?.data ?? 0}
                    />
                  </Typography>
                </div>
                <div>
                  <ArrowDownward className="text-6xl" color="primary" />
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent>
              <div className="flex w-full flex-col items-start gap-2 md:flex-row">
                <div className="flex-grow">
                  <Typography
                    sx={{ fontSize: 14 }}
                    color="text.secondary"
                    gutterBottom
                  >
                    Pengeluaran
                  </Typography>
                  <Typography variant="h5" component="div">
                    <CountUp
                      separator="."
                      decimal=","
                      decimals={2}
                      prefix="Rp. "
                      end={expense?.data ?? 0}
                    />
                  </Typography>
                </div>
                <div>
                  <ArrowUpward className="text-6xl" color="warning" />
                </div>
              </div>
            </CardContent>
          </Card>
        </Box>
        <Box className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <Box component={Paper} className="p-4">
            <Typography variant="h6" color="initial">
              Penjualan Harian
            </Typography>
            <div className="h-80">
              <ResponsiveContainer>
                <ComposedChart
                  data={salesDaily?.data ?? undefined}
                  margin={{ top: 20, right: 30, left: 0, bottom: 0 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis
                    dataKey="date"
                    tickFormatter={(value: Date) =>
                      format(new Date(value), "dd/MM/yyyy")
                    }
                  />
                  <YAxis
                    tickFormatter={(value: number) =>
                      abbreviateNumberLib(value)
                    }
                  />
                  <Tooltip content={<DateTooltip />} />
                  {/* <Legend /> */}
                  <Bar
                    type="monotone"
                    dataKey={"total"}
                    radius={[10, 10, 0, 0]}
                    fill={`#009688`}
                  />
                </ComposedChart>
              </ResponsiveContainer>
            </div>
          </Box>
          <Box component={Paper} className="p-4">
            <Typography variant="h6" color="initial">
              Pembelian Harian
            </Typography>
            <div className="h-80">
              <ResponsiveContainer>
                <ComposedChart
                  data={purchaseDaily?.data ?? undefined}
                  margin={{ top: 20, right: 30, left: 0, bottom: 0 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis
                    dataKey="date"
                    tickFormatter={(value: Date) =>
                      format(new Date(value), "dd/MM/yyyy")
                    }
                  />
                  <YAxis
                    tickFormatter={(value: number) =>
                      abbreviateNumberLib(value)
                    }
                  />
                  <Tooltip content={<DateTooltip />} />
                  {/* <Legend /> */}
                  <Bar
                    type="monotone"
                    dataKey={"total"}
                    radius={[10, 10, 0, 0]}
                    fill={`#ff5722`}
                  />
                </ComposedChart>
              </ResponsiveContainer>
            </div>
          </Box>
        </Box>
        <Box className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <Card>
            <CardContent>
              <div className="flex w-full flex-col items-start gap-2 md:flex-row">
                <div className="flex-grow">
                  <Typography
                    sx={{ fontSize: 14 }}
                    color="text.secondary"
                    gutterBottom
                  >
                    Piutang
                  </Typography>
                  <Typography variant="h5" component="div">
                    <CountUp
                      separator="."
                      decimal=","
                      decimals={2}
                      prefix="Rp. "
                      end={receivableTotal?.data ?? 0}
                    />
                  </Typography>
                </div>
                <div>
                  <Payments className="text-6xl" color="success" />
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent>
              <div className="flex w-full flex-col items-start gap-2 md:flex-row">
                <div className="flex-grow">
                  <Typography
                    sx={{ fontSize: 14 }}
                    color="text.secondary"
                    gutterBottom
                  >
                    Hutang
                  </Typography>
                  <Typography variant="h5" component="div">
                    <CountUp
                      separator="."
                      decimal=","
                      decimals={2}
                      prefix="Rp. "
                      end={debtTotal?.data ?? 0}
                    />
                  </Typography>
                </div>
                <div>
                  <AccountBalanceWallet className="text-6xl" color="primary" />
                </div>
              </div>
            </CardContent>
          </Card>
        </Box>
        <Box className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <Box component={Paper} className="p-4">
            <Typography variant="h6" color="initial">
              Penjualan Tiap Bulan
            </Typography>
            <div className="h-80">
              <ResponsiveContainer>
                <ComposedChart
                  data={salesMonthly?.data ?? undefined}
                  margin={{ top: 20, right: 30, left: 0, bottom: 0 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis
                    tickFormatter={(value: number) =>
                      abbreviateNumberLib(value)
                    }
                  />
                  <Tooltip content={<GeneralTooltip />} />
                  {/* <Legend /> */}
                  <Bar
                    type="monotone"
                    dataKey={"total"}
                    radius={[10, 10, 0, 0]}
                    fill={`#009688`}
                  />
                </ComposedChart>
              </ResponsiveContainer>
            </div>
          </Box>
          <Box component={Paper} className="p-4">
            <Typography variant="h6" color="initial">
              Pembelian Tiap Bulan
            </Typography>
            <div className="h-80">
              <ResponsiveContainer>
                <ComposedChart
                  data={purchaseMonthly?.data ?? undefined}
                  margin={{ top: 20, right: 30, left: 0, bottom: 0 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis
                    tickFormatter={(value: number) =>
                      abbreviateNumberLib(value)
                    }
                  />
                  <Tooltip content={<GeneralTooltip />} />
                  {/* <Legend /> */}
                  <Bar
                    type="monotone"
                    dataKey={"total"}
                    radius={[10, 10, 0, 0]}
                    fill={`#ff5722`}
                  />
                </ComposedChart>
              </ResponsiveContainer>
            </div>
          </Box>
        </Box>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const session = await getServerAuthSession(ctx);

  if (!session) {
    return {
      redirect: {
        destination: "/api/auth/signin",
        permanent: false,
      },
    };
  }
  const accessToken = session.accessToken;
  const tokenData = jwtDecode<IJwtDecode>(accessToken);
  if (!tokenData.session?.institute) {
    return {
      redirect: {
        destination: "/credentials/institute",
        permanent: false,
      },
    };
  }
  if (!tokenData.session?.unit) {
    return {
      redirect: {
        destination: "/credentials/unit",
        permanent: false,
      },
    };
  }
  if (session.user.role === Role.USER) {
    return {
      redirect: {
        destination: "/sales",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
    },
  };
};

export default DashboardPage;
DashboardPage.Layout = "Dashboard";
